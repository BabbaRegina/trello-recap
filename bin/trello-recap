#! /usr/bin/env node

const parseArgv = require('../lib/parse-argv')
const toMD = require('../lib/to-md')
const cardToString = require('../lib/card-to-string')

const trelloRecap = require('..')

process.on('unhandledRejection', console.error)

main()

function help () {
  return `
  ## usage

  --board is needed.

  > Tip: You can also pass it as first argument:
  > trello-recap "TRELLO_BOARD_NAME" --since "2018-02-01"

  --since is optional, ISO Date formatted string. e.g. "2018-02-01"

  --member is optional, username of a member (e.g. christianfei)

  --list is optional, filter lists by name (e.g. done)
  
  --label is optional, filter cards by label (e.g. bug)
  `
}

async function main () {
  const key = process.env.TRELLO_API_KEY || process.env.npm_config_TRELLO_API_KEY
  const token = process.env.TRELLO_API_TOKEN || process.env.npm_config_TRELLO_API_TOKEN

  if (!key || !token) {
    process.stderr.write(`Please set TRELLO_API_KEY and TRELLO_API_TOKEN in your env.\n`)
    process.stderr.write(help())
    process.exit(1)
  }
  const {board: boardName, since, member, list: listName, label: labelName} = parseArgv(process.argv)

  if (!boardName) {
    process.stderr.write(`Please provide a valid board name`)
    process.stderr.write(help())
    process.exit(1)
  }

  process.stdout.write(`Loading cards for ${boardName}\n`)
  const result = await trelloRecap({key, token}, {boardName, since, member, listName, labelName})

  if (result.errors) {
    process.stderr.write(JSON.stringify(result.errors))
    process.stderr.write(help())
    process.exit(1)
  }

  result.listsSorted.forEach((list, index) => {
    if (!result.cardsPerList[list.id]) return
    process.stdout.write('\n')
    process.stdout.write(toMD({type: 'h1', text: listToString(list)}))
    process.stdout.write('\n')
    process.stdout.write(statsToString(result.statsPerList[index]))
    for (const card of result.cardsPerList[list.id]) {
      process.stdout.write(cardToString(card))
    }
  })

  process.exit(0)
}

function listToString (list) {
  return `${list.name}\n`
}

function statsToString (stats) {
  if (Object.keys(stats).length === 0) return ''
  const effortString = 'Effort:\n' + Object.keys(stats).reduce((acc, key) => {
    return acc.concat(`${key}: ${stats[key]}\n`)
  }, '')
  return toMD({type: 'h2', text: effortString + '\n'})
}